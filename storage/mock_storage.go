// Copyright (C) 2019-2021, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by MockGen. DO NOT EDIT.
// Source: storage/storage.go

// Package storage is a generated GoMock package.
package storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage[V any] struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder[V]
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder[V any] struct {
	mock *MockStorage[V]
}

// NewMockStorage creates a new mock instance.
func NewMockStorage[V any](ctrl *gomock.Controller) *MockStorage[V] {
	mock := &MockStorage[V]{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder[V]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage[V]) EXPECT() *MockStorageMockRecorder[V] {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStorage[V]) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageMockRecorder[V]) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage[V])(nil).Delete), key)
}

// Get mocks base method.
func (m *MockStorage[V]) Get(key []byte) (V, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(V)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder[V]) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage[V])(nil).Get), key)
}

// Has mocks base method.
func (m *MockStorage[V]) Has(key []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockStorageMockRecorder[V]) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockStorage[V])(nil).Has), key)
}

// Iterator mocks base method.
func (m *MockStorage[V]) Iterator() Iterator[V] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Iterator")
	ret0, _ := ret[0].(Iterator[V])
	return ret0
}

// Iterator indicates an expected call of Iterator.
func (mr *MockStorageMockRecorder[V]) Iterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterator", reflect.TypeOf((*MockStorage[V])(nil).Iterator))
}

// Put mocks base method.
func (m *MockStorage[V]) Put(key []byte, value V) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockStorageMockRecorder[V]) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStorage[V])(nil).Put), key, value)
}
