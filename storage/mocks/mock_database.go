// Copyright (C) 2019-2021, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by MockGen. DO NOT EDIT.
// Source: database/database.go

// Package server is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	"github.com/MetalBlockchain/metalgo/database"
	gomock "github.com/golang/mock/gomock"
)

// MockKeyValueReader is a mock of KeyValueReader interface.
type MockKeyValueReader struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueReaderMockRecorder
}

// MockKeyValueReaderMockRecorder is the mock recorder for MockKeyValueReader.
type MockKeyValueReaderMockRecorder struct {
	mock *MockKeyValueReader
}

// NewMockKeyValueReader creates a new mock instance.
func NewMockKeyValueReader(ctrl *gomock.Controller) *MockKeyValueReader {
	mock := &MockKeyValueReader{ctrl: ctrl}
	mock.recorder = &MockKeyValueReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueReader) EXPECT() *MockKeyValueReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKeyValueReader) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeyValueReaderMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyValueReader)(nil).Get), key)
}

// Has mocks base method.
func (m *MockKeyValueReader) Has(key []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockKeyValueReaderMockRecorder) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockKeyValueReader)(nil).Has), key)
}

// MockKeyValueWriter is a mock of KeyValueWriter interface.
type MockKeyValueWriter struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueWriterMockRecorder
}

// MockKeyValueWriterMockRecorder is the mock recorder for MockKeyValueWriter.
type MockKeyValueWriterMockRecorder struct {
	mock *MockKeyValueWriter
}

// NewMockKeyValueWriter creates a new mock instance.
func NewMockKeyValueWriter(ctrl *gomock.Controller) *MockKeyValueWriter {
	mock := &MockKeyValueWriter{ctrl: ctrl}
	mock.recorder = &MockKeyValueWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueWriter) EXPECT() *MockKeyValueWriterMockRecorder {
	return m.recorder
}

// Put mocks base method.
func (m *MockKeyValueWriter) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockKeyValueWriterMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKeyValueWriter)(nil).Put), key, value)
}

// MockKeyValueDeleter is a mock of KeyValueDeleter interface.
type MockKeyValueDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueDeleterMockRecorder
}

// MockKeyValueDeleterMockRecorder is the mock recorder for MockKeyValueDeleter.
type MockKeyValueDeleterMockRecorder struct {
	mock *MockKeyValueDeleter
}

// NewMockKeyValueDeleter creates a new mock instance.
func NewMockKeyValueDeleter(ctrl *gomock.Controller) *MockKeyValueDeleter {
	mock := &MockKeyValueDeleter{ctrl: ctrl}
	mock.recorder = &MockKeyValueDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueDeleter) EXPECT() *MockKeyValueDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKeyValueDeleter) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKeyValueDeleterMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeyValueDeleter)(nil).Delete), key)
}

// MockKeyValueReaderWriter is a mock of KeyValueReaderWriter interface.
type MockKeyValueReaderWriter struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueReaderWriterMockRecorder
}

// MockKeyValueReaderWriterMockRecorder is the mock recorder for MockKeyValueReaderWriter.
type MockKeyValueReaderWriterMockRecorder struct {
	mock *MockKeyValueReaderWriter
}

// NewMockKeyValueReaderWriter creates a new mock instance.
func NewMockKeyValueReaderWriter(ctrl *gomock.Controller) *MockKeyValueReaderWriter {
	mock := &MockKeyValueReaderWriter{ctrl: ctrl}
	mock.recorder = &MockKeyValueReaderWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueReaderWriter) EXPECT() *MockKeyValueReaderWriterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKeyValueReaderWriter) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeyValueReaderWriterMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyValueReaderWriter)(nil).Get), key)
}

// Has mocks base method.
func (m *MockKeyValueReaderWriter) Has(key []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockKeyValueReaderWriterMockRecorder) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockKeyValueReaderWriter)(nil).Has), key)
}

// Put mocks base method.
func (m *MockKeyValueReaderWriter) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockKeyValueReaderWriterMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKeyValueReaderWriter)(nil).Put), key, value)
}

// MockKeyValueWriterDeleter is a mock of KeyValueWriterDeleter interface.
type MockKeyValueWriterDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueWriterDeleterMockRecorder
}

// MockKeyValueWriterDeleterMockRecorder is the mock recorder for MockKeyValueWriterDeleter.
type MockKeyValueWriterDeleterMockRecorder struct {
	mock *MockKeyValueWriterDeleter
}

// NewMockKeyValueWriterDeleter creates a new mock instance.
func NewMockKeyValueWriterDeleter(ctrl *gomock.Controller) *MockKeyValueWriterDeleter {
	mock := &MockKeyValueWriterDeleter{ctrl: ctrl}
	mock.recorder = &MockKeyValueWriterDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueWriterDeleter) EXPECT() *MockKeyValueWriterDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKeyValueWriterDeleter) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKeyValueWriterDeleterMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeyValueWriterDeleter)(nil).Delete), key)
}

// Put mocks base method.
func (m *MockKeyValueWriterDeleter) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockKeyValueWriterDeleterMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKeyValueWriterDeleter)(nil).Put), key, value)
}

// MockKeyValueReaderWriterDeleter is a mock of KeyValueReaderWriterDeleter interface.
type MockKeyValueReaderWriterDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueReaderWriterDeleterMockRecorder
}

// MockKeyValueReaderWriterDeleterMockRecorder is the mock recorder for MockKeyValueReaderWriterDeleter.
type MockKeyValueReaderWriterDeleterMockRecorder struct {
	mock *MockKeyValueReaderWriterDeleter
}

// NewMockKeyValueReaderWriterDeleter creates a new mock instance.
func NewMockKeyValueReaderWriterDeleter(ctrl *gomock.Controller) *MockKeyValueReaderWriterDeleter {
	mock := &MockKeyValueReaderWriterDeleter{ctrl: ctrl}
	mock.recorder = &MockKeyValueReaderWriterDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueReaderWriterDeleter) EXPECT() *MockKeyValueReaderWriterDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKeyValueReaderWriterDeleter) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKeyValueReaderWriterDeleterMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeyValueReaderWriterDeleter)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockKeyValueReaderWriterDeleter) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeyValueReaderWriterDeleterMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyValueReaderWriterDeleter)(nil).Get), key)
}

// Has mocks base method.
func (m *MockKeyValueReaderWriterDeleter) Has(key []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockKeyValueReaderWriterDeleterMockRecorder) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockKeyValueReaderWriterDeleter)(nil).Has), key)
}

// Put mocks base method.
func (m *MockKeyValueReaderWriterDeleter) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockKeyValueReaderWriterDeleterMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKeyValueReaderWriterDeleter)(nil).Put), key, value)
}

// MockCompacter is a mock of Compacter interface.
type MockCompacter struct {
	ctrl     *gomock.Controller
	recorder *MockCompacterMockRecorder
}

// MockCompacterMockRecorder is the mock recorder for MockCompacter.
type MockCompacterMockRecorder struct {
	mock *MockCompacter
}

// NewMockCompacter creates a new mock instance.
func NewMockCompacter(ctrl *gomock.Controller) *MockCompacter {
	mock := &MockCompacter{ctrl: ctrl}
	mock.recorder = &MockCompacterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompacter) EXPECT() *MockCompacterMockRecorder {
	return m.recorder
}

// Compact mocks base method.
func (m *MockCompacter) Compact(start, limit []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compact", start, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compact indicates an expected call of Compact.
func (mr *MockCompacterMockRecorder) Compact(start, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compact", reflect.TypeOf((*MockCompacter)(nil).Compact), start, limit)
}

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// Compact mocks base method.
func (m *MockDatabase) Compact(start, limit []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compact", start, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compact indicates an expected call of Compact.
func (mr *MockDatabaseMockRecorder) Compact(start, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compact", reflect.TypeOf((*MockDatabase)(nil).Compact), start, limit)
}

// Delete mocks base method.
func (m *MockDatabase) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDatabaseMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDatabase)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockDatabase) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDatabaseMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDatabase)(nil).Get), key)
}

// Has mocks base method.
func (m *MockDatabase) Has(key []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockDatabaseMockRecorder) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockDatabase)(nil).Has), key)
}

// HealthCheck mocks base method.
func (m *MockDatabase) HealthCheck() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockDatabaseMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockDatabase)(nil).HealthCheck))
}

// NewBatch mocks base method.
func (m *MockDatabase) NewBatch() database.Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBatch")
	ret0, _ := ret[0].(database.Batch)
	return ret0
}

// NewBatch indicates an expected call of NewBatch.
func (mr *MockDatabaseMockRecorder) NewBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockDatabase)(nil).NewBatch))
}

// NewIterator mocks base method.
func (m *MockDatabase) NewIterator() database.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIterator")
	ret0, _ := ret[0].(database.Iterator)
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockDatabaseMockRecorder) NewIterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockDatabase)(nil).NewIterator))
}

// NewIteratorWithPrefix mocks base method.
func (m *MockDatabase) NewIteratorWithPrefix(prefix []byte) database.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIteratorWithPrefix", prefix)
	ret0, _ := ret[0].(database.Iterator)
	return ret0
}

// NewIteratorWithPrefix indicates an expected call of NewIteratorWithPrefix.
func (mr *MockDatabaseMockRecorder) NewIteratorWithPrefix(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIteratorWithPrefix", reflect.TypeOf((*MockDatabase)(nil).NewIteratorWithPrefix), prefix)
}

// NewIteratorWithStart mocks base method.
func (m *MockDatabase) NewIteratorWithStart(start []byte) database.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIteratorWithStart", start)
	ret0, _ := ret[0].(database.Iterator)
	return ret0
}

// NewIteratorWithStart indicates an expected call of NewIteratorWithStart.
func (mr *MockDatabaseMockRecorder) NewIteratorWithStart(start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIteratorWithStart", reflect.TypeOf((*MockDatabase)(nil).NewIteratorWithStart), start)
}

// NewIteratorWithStartAndPrefix mocks base method.
func (m *MockDatabase) NewIteratorWithStartAndPrefix(start, prefix []byte) database.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIteratorWithStartAndPrefix", start, prefix)
	ret0, _ := ret[0].(database.Iterator)
	return ret0
}

// NewIteratorWithStartAndPrefix indicates an expected call of NewIteratorWithStartAndPrefix.
func (mr *MockDatabaseMockRecorder) NewIteratorWithStartAndPrefix(start, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIteratorWithStartAndPrefix", reflect.TypeOf((*MockDatabase)(nil).NewIteratorWithStartAndPrefix), start, prefix)
}

// Put mocks base method.
func (m *MockDatabase) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockDatabaseMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDatabase)(nil).Put), key, value)
}
